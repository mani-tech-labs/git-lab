Centralized version control system:
This is a legacy version control system where version control happens on centralized servers. As it's centralized, engineers have dependencies on the central server for their commits and updates. Though it's easy to maintain a single server, there is a risk of a single point of failure. If engineers are unable to connect to the server, their work gets stuck. To overcome these limitations, Linus Torvalds, the creator of Linux, officially introduced Git on April 7th, 2005.

Distributed version control system/Git:
---------------------------------------
In this system, every engineer can have their own copy of code from the main/remote server. They can make changes in their local copies, and once confident, push the changes to the remote server/main branch. Once they push code to the remote origin, their commits will be stored in the remote server. Engineers can control which commits they share (to avoid foolish commits :P). Similarly, other developers can do the same, and finally, the working/product code will be kept in the remote origin/main branch. An approval system can be in place to avoid commit mistakes and protect the main branch. If dev1 and dev2 make changes in the same line, a conflict arises which needs manual intervention to resolve. Before pushing, every developer's local code needs updated code from the remote origin.

Let's explore commands:
git init    : It will initialize Git, like installing a CCTV camera in the project :P. If you are creating in your local, in real time, we clone existing repos.

git clone <repo url>

Ex: git clone https://github.com/mani-tech-labs/shell-scripting-projects.git

git status  : It is useful to check the status of the current working directory, like if any files are modified, files need to be added to the stage, or yet to be committed, etc. It will help you with commands as well.

git log     : It will display all commits done by all users. Option -p can be used for a detailed log, showing changes done to files.

git add     : To add a modified file to the staging area. The same command can be used for adding a new file.

git add .   : To add all modified files to the staging area.

git restore --staged <filename> : To revert a staged file back to the modified state.

git restore --staged .  : To revert all staged files back to the modified state.

git restore <filename>  : To discard modifications done to a file.

git commit -m "msg"     : This will commit changes to the local repo.

git remote -v           : Lists all repositories connected with the local repo. The URL shows where the repo is hosted (GitHub/GitLab).

git remote remove <remote-name>

Ex: git remote remove origin : The 'origin' remote will be removed.

git remote add origin <remote-url>

Ex: git remote add origin https://github.com/mani-tech-labs/git-lab.git

Tip: In VS Code, when you add a new GitHub origin, it allows authentication via browser, as GitHub and VS Code are owned by Microsoft.

git push origin main    : Pushes the local repo changes to origin/main, i.e., the remote repo :)

git log     : To list all previous commits. Option --oneline can be used to list commits in one line. Option --decorate can be used to display the commit log with extra information and visually annotated.

git branch  : To list all branches. A pointer will show you which branch you currently in.

git branch <branch-name>    : To create a new branch

git checkout <branch-name>  : To switch to mentioned branch

git merge <branch-name>     : To merge the mentioned branch.













